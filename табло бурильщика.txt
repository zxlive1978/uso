Внешние программы реально-временного про-смотра и обработки данных
Это программы, которые не возвращают результатов. Такими программами являются про-граммы визуализации, печати и т.п.. Они присоединяются к REALTIME как DCOM-клиенты по интерфейсу IIMSViewService и получают события по интерфейсу IIMSEventService. Интерфейсы описаны в файле REALTIME.TLB.

IIMSViewService   {11A45860-0657-11D4-AF5F-0050DA79C21E}
IIMSEventService   {11A45869-0657-11D4-AF5F-0050DA79C21E}

При присоединении по интерфейсу IIMSViewService программа должна передать в REALTIME следующую информацию о себе с помощью метода IIMSViewService\ViewerInfo со следующими параметрами:
•   имя программы обработки;
•   сетевое имя компьютера, на котором работает программа;
•   адрес переменной, по которой будет возвращен результат выполнения.

Сервер интерфейса событий создается в клиенте, а в REALTIME пересылается указатель на него с помощью метода IIMSViewService\Advise. Для отсоединения сервера событий перед закрытием соединения вызовите метод IIMSViewService\Unadvise. По интерфейсу событий драйвер получает следующие события:
•   IIMSEventService\EvDisconnectAndTest «проверка соединения или просьба за-крыть соединение» - эти события отличаются по флагу TestSignal:
o   TRUE – сервер проверяет соединение, нужно только вернуть OK.
o   FALSE – сервер просит закрыть соединение, так как он завершает выполне-ние. Рекомендуем восстанавливать соединение не менее чем через 30 се-кунд, так как возможно пользователь перезагружает компьютер.
•   IIMSEventService\EvNewDataReady «событие прихода новых данных» - это со-бытие отсылается при окончании обработки новых данных.
•   IIMSEventService\EvAutoSendData «событие автоматической отсылки данных клиенту» - это событие генерируется, если клиент заказал прием данных в автома-тическом режиме. По этому событию сервер отсылает новые данные по предвари-тельно заказанному списку параметров клиенту. Таким образом нет необходимости постоянно опрашивать сервер на наличие новых данных.

Клиент в любое время при наличии связи с REALTIME может изменять или устанавли-вать режим передачи данных с помощью метода IIMSViewService\SetModes, имеющего следующие параметры:
•   OnlyModified – флаг передачи только изменившихся значений. Включенный флаг уменьшает загрузку трафика сети и времени на передачу данных.
•   UseAutoSend – флаг автоматической передачи новых данных. При включенном флаге REALTIME автоматически отсылает новые данные клиенту, то есть клиент работает по событиям, не тратя времени на постоянный или периодический опрос REALTIME об изменении данных. Этот флаг работает только при наличии сервера событий IIMSEventService в клиенте.

Запрашивать данные REALTIME можно 2-мя способами:
•   Прием данных по передаваемому списку параметров с помощью метода IIMSViewService\GetDataByList . В параметрах передаются:
o   ListItems – массив кодов заказываемых параметров. Это значение типа VARIANT, содержащий в себе массив кодов параметров из справочника DTCIS.
o   DataArray – ссылка на значение типа VARIANT, в который будут записаны значения заказанных параметров в формате, описанном выше.
o   ResultFlag – флаг выполнения операции.
•   Прием данных по заказанному списку параметров. Для этого используются сле-дующие методы:
o   IIMSViewService\ClearList – очистить список заказываемых параметров в сервере;
o   IIMSViewService\SetListItems – добавить параметры в список заказывае-мых параметров;
o   IIMSViewService\GetListData – запрос данных по заказанному списку.
Оба способа не исключают друг друга, то есть при необходимости вы можете переклю-чаться между ними в вашем приложении, при этом список заказываемых параметров не будет изменен.

Передача данных клиентам осуществляется в виде значения типа VARIANT. В это значе-ние записан массив заказанных параметров. Каждый параметр представлен в виде массива 3-х чисел: код параметра, код единицы измерения, значение. Кодировка пара-метров в соответствии со справочником DTCIS. Для примера приводим код распаковки одного элемента массива присланных данных, написанный в среде C++Builder

bool GetDataItem(Variant Data, SPVServiceDataItem *DataItem)
{
    try {
        // инициализация
        ZeroMemory(DataItem, sizeof(SPVServiceDataItem));
        // распаковать код параметра
        DataItem->Code = int(Data.GetElement(1));
        // распаковать код единицы измерения
        DataItem->UnitCode = int(Data.GetElement(2));
        // распаковать значение параметра
        DataItem->Value = Data.GetElement(3);
        return true;
        }
    catch(...)
        {
        return false;
        }
}

Передача информации на монитор бурильщика либо еще кудато, это по сути получение текущих данных с DTCIS.
http://mudlogging.ru/index.php/topic,1691.0.html

Для монитора бурильщика вообще есть RS485.

Табло состоит из нескольких блоков цифровой индикации и нескольких блоков отображе-ния гистограмм. Каждый блок цифровой индикации представляет собой строку цифр, длиной до 8 символов. Управление всеми блоками осуществляется по последовательному порту при помощи управляющих строк следующего формата:
Байт   Содержимое   Описание
0   Символ ( : )
(код 3Ah)   Заголовок посылаемого кадра
1   Длина   Байт определяет длину кадра после этого байта (2 байта заголовка не включаются в длину кадра)
2 - до кон-ца   Блоки дан-ных   Один или несколько блоков дан-ных, заключенные в квадратные скобки
При помощи одной кадровой посылки можно отобразить данные как на одном блоке циф-ровой индикации или блоке отображения гистограмм, так и на нескольких.

При помощи такого же блока данных можно установить яркость индикации. Для этого в отдельном блоке данных в байте адреса следует указать символ * (код 2Ah), за которым следует байт яркости, имеющий значение от 0 до 15.

Формат блока данных:
При помощи такого же блока данных можно установить яркость индикации.
Байт   Содержимое   Описание
0   Символ ( [ )
(код 5Bh)   Начальный символ блока
1   Адрес 0-19   Адрес блока индикации, для кото-рого предназначен блок
2 … N-1   Строка ото-бражения   Строка цифр для отображения в блоке
N   Символ ( ] )
(код 5Dh)   Конечный символ блока
Кроме цифр в строке могут присутствовать символы:
AbCdEFhIiJLOPrtUu.-_
Пример кадра управления блоками цифровой индикации отображает на блоках индикации информацию и устанавливает максимальную яркость свечения:

: 40h [0 012.34][1 75.5][4 5.6][7 45.3][9 55.23][* 15h]

Номер блока   Информация
0   12.34
1   75.5
4   5.6
7   45.3
9   55.23

Формат блока данных для блока отображения гис-тограмм
Данные для блоков отображения гистограмм имеют аналогичный формат. После байта адреса идут 4 байта данных, имеющие следующий смысл:
1)   Байт формата. Может быть равен 0 или не равен 0. В первом случае это формат "зеленый столбец, красные уставки", во втором случае - это "красный столбец, зе-леные уставки".
2)   Размер столбца - количество поджигаемых светодиодных полосок. Если столбец поджигать не надо, то этот байт должен быть равен FFh.
3)   3-й и 4-й байты задают позицию уставок. Если уставки поджигать не надо, то соот-ветствующий байт равен 0FFh.

Особенности представления данных для круговой диаграммы
        Круговая диаграмма представляет собой как бы два блока отображения гистограмм, из которых второй является продолжением первого. Для управления круговой диаграммой необходимо так составить блоки управления ими, чтобы не засветить столбец второй диа-граммы, когда отображаемая величина менее половины шкалы, и не засветить лишние ус-тавки (см. выше).
